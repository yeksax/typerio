// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id       String @id @default(uuid())
  email    String @unique
  username String @unique

  profilePicture String   @default("/user.png")
  createdAt      DateTime @default(now())
  name           String
  tag            String

  messages    Message[]
  groupChats  Group[]
  ownedGroups Group[]   @relation("OwnedGroups")

  directMessages DirectMessage[]

  likedPosts Post[] @relation("LikedBy")

  following     User[]               @relation("Friends")
  followedBy    User[]               @relation("Friends")
  posts         Post[]
  notifications Notification[]
  actions       NotificationActors[]

  @@index([email])
}

model Group {
  id          String @id @unique
  owner       User   @relation("OwnedGroups", fields: [ownerId], references: [id])
  ownerId     String
  name        String
  description String
  thumbnail   String @default("/group.png")

  members   User[]
  createdAt DateTime  @default(now())
  messages  Message[]
  post      Post[]

  @@index([ownerId])
}

model DirectMessage {
  id       String    @id @unique
  members  User[]
  messages Message[]
}

model EditedMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  files     File[]
  message   Message? @relation(fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  messageId String?

  @@index([messageId])
}

model Message {
  id           String          @id @default(uuid())
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  content      String          @db.Text
  pastVersions EditedMessage[]
  attachments  File[]

  author          User           @relation(fields: [authorId], references: [id])
  authorId        String
  groupChat       Group?         @relation(fields: [groupChatId], references: [id])
  groupChatId     String
  directMessage   DirectMessage? @relation(fields: [directMessageId], references: [id])
  directMessageId String?

  mentionedByMessages Message[] @relation("MentionedMessage")
  mentionedMessage    Message?  @relation("MentionedMessage", fields: [mentionedMessageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  mentionedMessageId  String?

  @@index([id, authorId])
  @@index([authorId])
  @@index([groupChatId])
  @@index([directMessageId])
  @@index([mentionedMessageId])
}

model File {
  id   String @id @default(uuid())
  name String
  url  String
  size Int

  message         Message?       @relation(fields: [messageId], references: [id])
  messageId       String?
  post            Post?          @relation(fields: [postId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId          String?
  editedMessage   EditedMessage? @relation(fields: [editedMessageId], references: [id])
  editedMessageId String?

  @@index([messageId])
  @@index([postId])
  @@index([editedMessageId])
}

model Post {
  id        String   @id @default(uuid())
  content   String   @db.Text
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  groupId String?
  userId  String

  thread  Post[] @relation("Thread")
  replies Post[] @relation("Replies")

  author   User   @relation(fields: [userId], references: [id])
  invite   Group? @relation(fields: [groupId], references: [id])
  inThread Post[] @relation("Thread")

  attachments File[]

  likedBy User[] @relation("LikedBy")

  replied   Post?   @relation("Replies", fields: [repliedId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  repliedId String?

  @@index([userId])
  @@index([groupId])
  @@index([repliedId])
}

model NotificationActors {
  id    String @id @default(uuid())
  users User[]

  notification   Notification @relation(fields: [notificationId], references: [id])
  notificationId String       @unique

  @@index([notificationId])
}

model Notification {
  id        String             @id @default(uuid())
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  action    NotificationAction @default(GENERIC)

  receiverId String
  title      String  @db.Text
  text       String  @db.Text
  isRead     Boolean @default(false)
  redirect   String

  notificationReceiver User                @relation(fields: [receiverId], references: [id])
  notificationActors   NotificationActors?

  @@index([receiverId])
}

enum NotificationAction {
  REPLY
  LIKE
  FOLLOW
  GENERIC
}
